/**
 * AWS Lambda / Vercel Function: Server-Side AI Image Generation
 * Eliminates CORS issues by generating images server-side
 */

import OpenAI from 'openai';

export default async function handler(req, res) {
  // Only allow POST requests
  if (req.method !== 'POST') {
    return res.status(405).json({ error: 'Method not allowed' });
  }

  try {
    const { prompt, frameWidth, frameHeight } = req.body;
    
    if (!prompt) {
      return res.status(400).json({ error: 'Prompt is required' });
    }

    console.log('[LAMBDA] üé® Starting AI image generation...');
    console.log('[LAMBDA] Prompt:', prompt);
    console.log('[LAMBDA] Frame dimensions:', frameWidth, '√ó', frameHeight);

    // Initialize OpenAI client
    const apiKey = process.env.VITE_OPENAI_API_KEY || process.env.OPENAI_API_KEY;
    if (!apiKey) {
      return res.status(500).json({ error: 'OpenAI API key not configured' });
    }

    const openai = new OpenAI({ apiKey });

    // üéØ Smart Dimension System (same logic as client)
    let dalleSize = "1024x1024";
    let enhancedPrompt = prompt;
    
    if (frameWidth && frameHeight) {
      const aspectRatio = frameWidth / frameHeight;
      console.log(`[LAMBDA] üìê Aspect ratio: ${aspectRatio.toFixed(2)}`);
      
      if (aspectRatio > 1.5) {
        // Wide frame ‚Üí Landscape
        dalleSize = "1792x1024";
        enhancedPrompt = prompt + ", wide panoramic composition, landscape orientation";
        console.log('[LAMBDA] üñºÔ∏è Wide frame ‚Üí Using landscape 1792√ó1024');
      } else if (aspectRatio < 0.7) {
        // Tall frame ‚Üí Portrait  
        dalleSize = "1024x1792";
        enhancedPrompt = prompt + ", tall vertical composition, portrait orientation";
        console.log('[LAMBDA] üì± Tall frame ‚Üí Using portrait 1024√ó1792');
      } else {
        // Square-ish ‚Üí Square
        dalleSize = "1024x1024";
        enhancedPrompt = prompt + ", square composition, centered subject";
        console.log('[LAMBDA] ‚¨ú Square frame ‚Üí Using square 1024√ó1024');
      }
    }

    console.log('[LAMBDA] üé® Enhanced prompt:', enhancedPrompt);
    console.log('[LAMBDA] üìè DALL-E size:', dalleSize);

    // Generate image with DALL-E
    const response = await openai.images.generate({
      model: "dall-e-3",
      prompt: enhancedPrompt,
      n: 1,
      size: dalleSize,
      quality: "standard",
      response_format: "url"
    });

    if (!response.data || response.data.length === 0) {
      throw new Error('No image generated by DALL-E');
    }

    const imageUrl = response.data[0].url;
    if (!imageUrl) {
      throw new Error('DALL-E did not return a valid image URL');
    }

    console.log('[LAMBDA] ‚úÖ DALL-E generation successful');

    // Fetch the image server-side (no CORS restrictions)
    console.log('[LAMBDA] üì• Fetching image server-side...');
    const imageResponse = await fetch(imageUrl, {
      headers: {
        'User-Agent': 'CollabCanvas-Lambda/1.0',
        'Accept': 'image/*'
      }
    });

    if (!imageResponse.ok) {
      throw new Error(`Failed to fetch image: ${imageResponse.status} ${imageResponse.statusText}`);
    }

    // Convert to base64 data URL
    const buffer = await imageResponse.arrayBuffer();
    const base64 = Buffer.from(buffer).toString('base64');
    const contentType = imageResponse.headers.get('content-type') || 'image/png';
    const dataUrl = `data:${contentType};base64,${base64}`;

    console.log('[LAMBDA] ‚úÖ Image converted to data URL');
    console.log('[LAMBDA] Content-Type:', contentType);
    console.log('[LAMBDA] Size:', buffer.byteLength, 'bytes');

    return res.status(200).json({ 
      success: true,
      dataUrl,
      contentType,
      size: buffer.byteLength,
      dalleSize,
      enhancedPrompt: enhancedPrompt !== prompt ? enhancedPrompt : undefined
    });

  } catch (error) {
    console.error('[LAMBDA] ‚ùå Error:', error);
    
    // Handle specific error types
    if (error.message && error.message.includes('billing')) {
      return res.status(402).json({ 
        error: 'OpenAI billing limit reached',
        details: 'Please check your OpenAI account billing settings'
      });
    }
    
    if (error.message && error.message.includes('rate limit')) {
      return res.status(429).json({ 
        error: 'Rate limit exceeded',
        details: 'Please try again in a moment'
      });
    }
    
    if (error.message && error.message.includes('content policy')) {
      return res.status(400).json({ 
        error: 'Content policy violation',
        details: 'Please try a different prompt that complies with OpenAI policies'
      });
    }

    return res.status(500).json({ 
      error: 'Image generation failed',
      details: error.message || 'Unknown error occurred'
    });
  }
}
